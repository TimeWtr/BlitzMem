// Code generated by MockGen. DO NOT EDIT.
// Source: event_hub.go
//
// Generated by this command:
//
//	mockgen -source=event_hub.go -destination=event_hub_mock.go -package=weight EventHub
//

// Package weight is a generated GoMock package.
package weight

import (
	reflect "reflect"

	common "github.com/TimeWtr/TurboAlloc/common"
	gomock "go.uber.org/mock/gomock"
)

// MockEventHub is a mock of EventHub interface.
type MockEventHub struct {
	ctrl     *gomock.Controller
	recorder *MockEventHubMockRecorder
	isgomock struct{}
}

// MockEventHubMockRecorder is the mock recorder for MockEventHub.
type MockEventHubMockRecorder struct {
	mock *MockEventHub
}

// NewMockEventHub creates a new mock instance.
func NewMockEventHub(ctrl *gomock.Controller) *MockEventHub {
	mock := &MockEventHub{ctrl: ctrl}
	mock.recorder = &MockEventHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHub) EXPECT() *MockEventHubMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventHub) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventHubMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventHub)(nil).Close))
}

// Dispatch mocks base method.
func (m *MockEventHub) Dispatch(ev Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", ev)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockEventHubMockRecorder) Dispatch(ev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockEventHub)(nil).Dispatch), ev)
}

// Register mocks base method.
func (m *MockEventHub) Register(tag string, sc common.SizeCategory, bufferSize ...int) <-chan Event {
	m.ctrl.T.Helper()
	varargs := []any{tag, sc}
	for _, a := range bufferSize {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(<-chan Event)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockEventHubMockRecorder) Register(tag, sc any, bufferSize ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tag, sc}, bufferSize...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEventHub)(nil).Register), varargs...)
}

// Unregister mocks base method.
func (m *MockEventHub) Unregister(tag string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", tag)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockEventHubMockRecorder) Unregister(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockEventHub)(nil).Unregister), tag)
}
