// Code generated by MockGen. DO NOT EDIT.
// Source: plugins_hub.go
//
// Generated by this command:
//
//	mockgen -source=plugins_hub.go -destination=plugins_hub_mock.go -package=weight
//

// Package weight is a generated GoMock package.
package weight

import (
	context "context"
	reflect "reflect"

	plugin "github.com/TimeWtr/TurboAlloc/weight/plugin"
	gomock "go.uber.org/mock/gomock"
)

// MockPluginsHub is a mock of PluginsHub interface.
type MockPluginsHub struct {
	ctrl     *gomock.Controller
	recorder *MockPluginsHubMockRecorder
	isgomock struct{}
}

// MockPluginsHubMockRecorder is the mock recorder for MockPluginsHub.
type MockPluginsHubMockRecorder struct {
	mock *MockPluginsHub
}

// NewMockPluginsHub creates a new mock instance.
func NewMockPluginsHub(ctrl *gomock.Controller) *MockPluginsHub {
	mock := &MockPluginsHub{ctrl: ctrl}
	mock.recorder = &MockPluginsHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginsHub) EXPECT() *MockPluginsHubMockRecorder {
	return m.recorder
}

// CallPlugin mocks base method.
func (m *MockPluginsHub) CallPlugin(ctx context.Context, hookName string, hookFunc func(plugin.Plugin) (any, error)) ([]HookResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallPlugin", ctx, hookName, hookFunc)
	ret0, _ := ret[0].([]HookResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallPlugin indicates an expected call of CallPlugin.
func (mr *MockPluginsHubMockRecorder) CallPlugin(ctx, hookName, hookFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallPlugin", reflect.TypeOf((*MockPluginsHub)(nil).CallPlugin), ctx, hookName, hookFunc)
}

// GetPluginTypes mocks base method.
func (m *MockPluginsHub) GetPluginTypes(ctx context.Context) []plugin.TypePlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginTypes", ctx)
	ret0, _ := ret[0].([]plugin.TypePlugin)
	return ret0
}

// GetPluginTypes indicates an expected call of GetPluginTypes.
func (mr *MockPluginsHubMockRecorder) GetPluginTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginTypes", reflect.TypeOf((*MockPluginsHub)(nil).GetPluginTypes), ctx)
}

// GetPluginsByType mocks base method.
func (m *MockPluginsHub) GetPluginsByType(ctx context.Context, tp plugin.TypePlugin) []plugin.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginsByType", ctx, tp)
	ret0, _ := ret[0].([]plugin.Plugin)
	return ret0
}

// GetPluginsByType indicates an expected call of GetPluginsByType.
func (mr *MockPluginsHubMockRecorder) GetPluginsByType(ctx, tp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginsByType", reflect.TypeOf((*MockPluginsHub)(nil).GetPluginsByType), ctx, tp)
}

// HealthCheck mocks base method.
func (m *MockPluginsHub) HealthCheck(ctx context.Context) map[string]PluginStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(map[string]PluginStatus)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockPluginsHubMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockPluginsHub)(nil).HealthCheck), ctx)
}

// InitAll mocks base method.
func (m *MockPluginsHub) InitAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitAll indicates an expected call of InitAll.
func (mr *MockPluginsHubMockRecorder) InitAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitAll", reflect.TypeOf((*MockPluginsHub)(nil).InitAll), ctx)
}

// Register mocks base method.
func (m *MockPluginsHub) Register(ctx context.Context, tp plugin.TypePlugin, arg2 plugin.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, tp, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockPluginsHubMockRecorder) Register(ctx, tp, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPluginsHub)(nil).Register), ctx, tp, arg2)
}

// RegisterBatch mocks base method.
func (m *MockPluginsHub) RegisterBatch(ctx context.Context, tp plugin.TypePlugin, plugins []plugin.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBatch", ctx, tp, plugins)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBatch indicates an expected call of RegisterBatch.
func (mr *MockPluginsHubMockRecorder) RegisterBatch(ctx, tp, plugins any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBatch", reflect.TypeOf((*MockPluginsHub)(nil).RegisterBatch), ctx, tp, plugins)
}

// ShutdownAll mocks base method.
func (m *MockPluginsHub) ShutdownAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownAll indicates an expected call of ShutdownAll.
func (mr *MockPluginsHubMockRecorder) ShutdownAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownAll", reflect.TypeOf((*MockPluginsHub)(nil).ShutdownAll), ctx)
}

// StartAll mocks base method.
func (m *MockPluginsHub) StartAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAll indicates an expected call of StartAll.
func (mr *MockPluginsHubMockRecorder) StartAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAll", reflect.TypeOf((*MockPluginsHub)(nil).StartAll), ctx)
}

// Unregister mocks base method.
func (m *MockPluginsHub) Unregister(ctx context.Context, tp plugin.TypePlugin, arg2 plugin.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", ctx, tp, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockPluginsHubMockRecorder) Unregister(ctx, tp, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockPluginsHub)(nil).Unregister), ctx, tp, arg2)
}

// UnregisterByName mocks base method.
func (m *MockPluginsHub) UnregisterByName(ctx context.Context, tp plugin.TypePlugin, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterByName", ctx, tp, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterByName indicates an expected call of UnregisterByName.
func (mr *MockPluginsHubMockRecorder) UnregisterByName(ctx, tp, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterByName", reflect.TypeOf((*MockPluginsHub)(nil).UnregisterByName), ctx, tp, name)
}

// MockPluginsManager is a mock of PluginsManager interface.
type MockPluginsManager struct {
	ctrl     *gomock.Controller
	recorder *MockPluginsManagerMockRecorder
	isgomock struct{}
}

// MockPluginsManagerMockRecorder is the mock recorder for MockPluginsManager.
type MockPluginsManagerMockRecorder struct {
	mock *MockPluginsManager
}

// NewMockPluginsManager creates a new mock instance.
func NewMockPluginsManager(ctrl *gomock.Controller) *MockPluginsManager {
	mock := &MockPluginsManager{ctrl: ctrl}
	mock.recorder = &MockPluginsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginsManager) EXPECT() *MockPluginsManagerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockPluginsManager) Register(ctx context.Context, tp plugin.TypePlugin, arg2 plugin.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, tp, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockPluginsManagerMockRecorder) Register(ctx, tp, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPluginsManager)(nil).Register), ctx, tp, arg2)
}

// RegisterBatch mocks base method.
func (m *MockPluginsManager) RegisterBatch(ctx context.Context, tp plugin.TypePlugin, plugins []plugin.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBatch", ctx, tp, plugins)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBatch indicates an expected call of RegisterBatch.
func (mr *MockPluginsManagerMockRecorder) RegisterBatch(ctx, tp, plugins any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBatch", reflect.TypeOf((*MockPluginsManager)(nil).RegisterBatch), ctx, tp, plugins)
}

// Unregister mocks base method.
func (m *MockPluginsManager) Unregister(ctx context.Context, tp plugin.TypePlugin, arg2 plugin.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", ctx, tp, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockPluginsManagerMockRecorder) Unregister(ctx, tp, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockPluginsManager)(nil).Unregister), ctx, tp, arg2)
}

// UnregisterByName mocks base method.
func (m *MockPluginsManager) UnregisterByName(ctx context.Context, tp plugin.TypePlugin, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterByName", ctx, tp, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterByName indicates an expected call of UnregisterByName.
func (mr *MockPluginsManagerMockRecorder) UnregisterByName(ctx, tp, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterByName", reflect.TypeOf((*MockPluginsManager)(nil).UnregisterByName), ctx, tp, name)
}

// MockPluginsDiscover is a mock of PluginsDiscover interface.
type MockPluginsDiscover struct {
	ctrl     *gomock.Controller
	recorder *MockPluginsDiscoverMockRecorder
	isgomock struct{}
}

// MockPluginsDiscoverMockRecorder is the mock recorder for MockPluginsDiscover.
type MockPluginsDiscoverMockRecorder struct {
	mock *MockPluginsDiscover
}

// NewMockPluginsDiscover creates a new mock instance.
func NewMockPluginsDiscover(ctrl *gomock.Controller) *MockPluginsDiscover {
	mock := &MockPluginsDiscover{ctrl: ctrl}
	mock.recorder = &MockPluginsDiscoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginsDiscover) EXPECT() *MockPluginsDiscoverMockRecorder {
	return m.recorder
}

// GetPluginTypes mocks base method.
func (m *MockPluginsDiscover) GetPluginTypes(ctx context.Context) []plugin.TypePlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginTypes", ctx)
	ret0, _ := ret[0].([]plugin.TypePlugin)
	return ret0
}

// GetPluginTypes indicates an expected call of GetPluginTypes.
func (mr *MockPluginsDiscoverMockRecorder) GetPluginTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginTypes", reflect.TypeOf((*MockPluginsDiscover)(nil).GetPluginTypes), ctx)
}

// GetPluginsByType mocks base method.
func (m *MockPluginsDiscover) GetPluginsByType(ctx context.Context, tp plugin.TypePlugin) []plugin.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginsByType", ctx, tp)
	ret0, _ := ret[0].([]plugin.Plugin)
	return ret0
}

// GetPluginsByType indicates an expected call of GetPluginsByType.
func (mr *MockPluginsDiscoverMockRecorder) GetPluginsByType(ctx, tp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginsByType", reflect.TypeOf((*MockPluginsDiscover)(nil).GetPluginsByType), ctx, tp)
}

// MockPluginsLifecycle is a mock of PluginsLifecycle interface.
type MockPluginsLifecycle struct {
	ctrl     *gomock.Controller
	recorder *MockPluginsLifecycleMockRecorder
	isgomock struct{}
}

// MockPluginsLifecycleMockRecorder is the mock recorder for MockPluginsLifecycle.
type MockPluginsLifecycleMockRecorder struct {
	mock *MockPluginsLifecycle
}

// NewMockPluginsLifecycle creates a new mock instance.
func NewMockPluginsLifecycle(ctrl *gomock.Controller) *MockPluginsLifecycle {
	mock := &MockPluginsLifecycle{ctrl: ctrl}
	mock.recorder = &MockPluginsLifecycleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginsLifecycle) EXPECT() *MockPluginsLifecycleMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockPluginsLifecycle) HealthCheck(ctx context.Context) map[string]PluginStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(map[string]PluginStatus)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockPluginsLifecycleMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockPluginsLifecycle)(nil).HealthCheck), ctx)
}

// InitAll mocks base method.
func (m *MockPluginsLifecycle) InitAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitAll indicates an expected call of InitAll.
func (mr *MockPluginsLifecycleMockRecorder) InitAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitAll", reflect.TypeOf((*MockPluginsLifecycle)(nil).InitAll), ctx)
}

// ShutdownAll mocks base method.
func (m *MockPluginsLifecycle) ShutdownAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownAll indicates an expected call of ShutdownAll.
func (mr *MockPluginsLifecycleMockRecorder) ShutdownAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownAll", reflect.TypeOf((*MockPluginsLifecycle)(nil).ShutdownAll), ctx)
}

// StartAll mocks base method.
func (m *MockPluginsLifecycle) StartAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAll indicates an expected call of StartAll.
func (mr *MockPluginsLifecycleMockRecorder) StartAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAll", reflect.TypeOf((*MockPluginsLifecycle)(nil).StartAll), ctx)
}

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
	isgomock struct{}
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// CallPlugin mocks base method.
func (m *MockScheduler) CallPlugin(ctx context.Context, hookName string, hookFunc func(plugin.Plugin) (any, error)) ([]HookResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallPlugin", ctx, hookName, hookFunc)
	ret0, _ := ret[0].([]HookResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallPlugin indicates an expected call of CallPlugin.
func (mr *MockSchedulerMockRecorder) CallPlugin(ctx, hookName, hookFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallPlugin", reflect.TypeOf((*MockScheduler)(nil).CallPlugin), ctx, hookName, hookFunc)
}

// MockAdvanced is a mock of Advanced interface.
type MockAdvanced struct {
	ctrl     *gomock.Controller
	recorder *MockAdvancedMockRecorder
	isgomock struct{}
}

// MockAdvancedMockRecorder is the mock recorder for MockAdvanced.
type MockAdvancedMockRecorder struct {
	mock *MockAdvanced
}

// NewMockAdvanced creates a new mock instance.
func NewMockAdvanced(ctrl *gomock.Controller) *MockAdvanced {
	mock := &MockAdvanced{ctrl: ctrl}
	mock.recorder = &MockAdvancedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvanced) EXPECT() *MockAdvancedMockRecorder {
	return m.recorder
}
