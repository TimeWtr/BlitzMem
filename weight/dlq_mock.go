// Code generated by MockGen. DO NOT EDIT.
// Source: dlq.go
//
// Generated by this command:
//
//	mockgen -source=dlq.go -destination=dlq_mock.go -package=weight
//

// Package weight is a generated GoMock package.
package weight

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDLQ is a mock of DLQ interface.
type MockDLQ struct {
	ctrl     *gomock.Controller
	recorder *MockDLQMockRecorder
	isgomock struct{}
}

// MockDLQMockRecorder is the mock recorder for MockDLQ.
type MockDLQMockRecorder struct {
	mock *MockDLQ
}

// NewMockDLQ creates a new mock instance.
func NewMockDLQ(ctrl *gomock.Controller) *MockDLQ {
	mock := &MockDLQ{ctrl: ctrl}
	mock.recorder = &MockDLQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLQ) EXPECT() *MockDLQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDLQ) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDLQMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDLQ)(nil).Close))
}

// GetAll mocks base method.
func (m *MockDLQ) GetAll(ctx context.Context) ([]*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDLQMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDLQ)(nil).GetAll), ctx)
}

// GetSize mocks base method.
func (m *MockDLQ) GetSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSize indicates an expected call of GetSize.
func (mr *MockDLQMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockDLQ)(nil).GetSize))
}

// Pop mocks base method.
func (m *MockDLQ) Pop(ctx context.Context) (*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", ctx)
	ret0, _ := ret[0].(*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockDLQMockRecorder) Pop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockDLQ)(nil).Pop), ctx)
}

// Push mocks base method.
func (m *MockDLQ) Push(ctx context.Context, event *DLQEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockDLQMockRecorder) Push(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockDLQ)(nil).Push), ctx, event)
}

// Remove mocks base method.
func (m *MockDLQ) Remove(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockDLQMockRecorder) Remove(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDLQ)(nil).Remove), ctx, id)
}

// MockPersistentDLQ is a mock of PersistentDLQ interface.
type MockPersistentDLQ struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentDLQMockRecorder
	isgomock struct{}
}

// MockPersistentDLQMockRecorder is the mock recorder for MockPersistentDLQ.
type MockPersistentDLQMockRecorder struct {
	mock *MockPersistentDLQ
}

// NewMockPersistentDLQ creates a new mock instance.
func NewMockPersistentDLQ(ctrl *gomock.Controller) *MockPersistentDLQ {
	mock := &MockPersistentDLQ{ctrl: ctrl}
	mock.recorder = &MockPersistentDLQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentDLQ) EXPECT() *MockPersistentDLQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPersistentDLQ) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPersistentDLQMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPersistentDLQ)(nil).Close))
}

// GetAll mocks base method.
func (m *MockPersistentDLQ) GetAll(ctx context.Context) ([]*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPersistentDLQMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPersistentDLQ)(nil).GetAll), ctx)
}

// GetSize mocks base method.
func (m *MockPersistentDLQ) GetSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSize indicates an expected call of GetSize.
func (mr *MockPersistentDLQMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockPersistentDLQ)(nil).GetSize))
}

// Pop mocks base method.
func (m *MockPersistentDLQ) Pop(ctx context.Context) (*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", ctx)
	ret0, _ := ret[0].(*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockPersistentDLQMockRecorder) Pop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockPersistentDLQ)(nil).Pop), ctx)
}

// Push mocks base method.
func (m *MockPersistentDLQ) Push(ctx context.Context, event *DLQEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockPersistentDLQMockRecorder) Push(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPersistentDLQ)(nil).Push), ctx, event)
}

// Recover mocks base method.
func (m *MockPersistentDLQ) Recover() ([]*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover")
	ret0, _ := ret[0].([]*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recover indicates an expected call of Recover.
func (mr *MockPersistentDLQMockRecorder) Recover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockPersistentDLQ)(nil).Recover))
}

// Remove mocks base method.
func (m *MockPersistentDLQ) Remove(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPersistentDLQMockRecorder) Remove(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPersistentDLQ)(nil).Remove), ctx, id)
}

// MockDistributedDLQ is a mock of DistributedDLQ interface.
type MockDistributedDLQ struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedDLQMockRecorder
	isgomock struct{}
}

// MockDistributedDLQMockRecorder is the mock recorder for MockDistributedDLQ.
type MockDistributedDLQMockRecorder struct {
	mock *MockDistributedDLQ
}

// NewMockDistributedDLQ creates a new mock instance.
func NewMockDistributedDLQ(ctrl *gomock.Controller) *MockDistributedDLQ {
	mock := &MockDistributedDLQ{ctrl: ctrl}
	mock.recorder = &MockDistributedDLQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedDLQ) EXPECT() *MockDistributedDLQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDistributedDLQ) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDistributedDLQMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDistributedDLQ)(nil).Close))
}

// ClusterSize mocks base method.
func (m *MockDistributedDLQ) ClusterSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// ClusterSize indicates an expected call of ClusterSize.
func (mr *MockDistributedDLQMockRecorder) ClusterSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSize", reflect.TypeOf((*MockDistributedDLQ)(nil).ClusterSize))
}

// GetAll mocks base method.
func (m *MockDistributedDLQ) GetAll(ctx context.Context) ([]*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDistributedDLQMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDistributedDLQ)(nil).GetAll), ctx)
}

// GetSize mocks base method.
func (m *MockDistributedDLQ) GetSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSize indicates an expected call of GetSize.
func (mr *MockDistributedDLQMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockDistributedDLQ)(nil).GetSize))
}

// Pop mocks base method.
func (m *MockDistributedDLQ) Pop(ctx context.Context) (*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", ctx)
	ret0, _ := ret[0].(*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockDistributedDLQMockRecorder) Pop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockDistributedDLQ)(nil).Pop), ctx)
}

// Push mocks base method.
func (m *MockDistributedDLQ) Push(ctx context.Context, event *DLQEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockDistributedDLQMockRecorder) Push(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockDistributedDLQ)(nil).Push), ctx, event)
}

// Recover mocks base method.
func (m *MockDistributedDLQ) Recover() ([]*DLQEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover")
	ret0, _ := ret[0].([]*DLQEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recover indicates an expected call of Recover.
func (mr *MockDistributedDLQMockRecorder) Recover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockDistributedDLQ)(nil).Recover))
}

// Remove mocks base method.
func (m *MockDistributedDLQ) Remove(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockDistributedDLQMockRecorder) Remove(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDistributedDLQ)(nil).Remove), ctx, id)
}
